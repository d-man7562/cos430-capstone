<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Networked Two-Person Chat</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: Arial, sans-serif;
        }

        body {
            background-color: #f5f5f5;
            height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .header {
            background-color: #4a69bd;
            color: white;
            padding: 15px;
            text-align: center;
            font-size: 1.5rem;
            font-weight: bold;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .room-info {
            font-size: 0.9rem;
            background-color: rgba(255, 255, 255, 0.2);
            padding: 5px 10px;
            border-radius: 4px;
        }

        .chat-container {
            display: flex;
            flex: 1;
            overflow: hidden;
        }

        .chat-column {
            flex: 1;
            display: flex;
            flex-direction: column;
            border-right: 1px solid #ddd;
        }

        .chat-column:last-child {
            border-right: none;
        }

        .user-header {
            padding: 10px;
            background-color: #f0f0f0;
            text-align: center;
            font-weight: bold;
            border-bottom: 1px solid #ddd;
        }

        .user-header {
            background-color: #ecf0f1;
            color: #2980b9;
        }

        .messages {
            flex: 1;
            overflow-y: auto;
            padding: 15px;
        }

        .message {
            margin-bottom: 15px;
            padding: 10px;
            border-radius: 8px;
            max-width: 80%;
            word-wrap: break-word;
        }

        .message-sent {
            background-color: #dcf8c6;
            margin-left: auto;
        }

        .message-received {
            background-color: #f0f0f0;
        }

        .timestamp {
            font-size: 0.7rem;
            color: #999;
            text-align: right;
            margin-top: 4px;
        }

        .sender-name {
            font-size: 0.8rem;
            font-weight: bold;
            margin-bottom: 3px;
        }

        .input-area {
            padding: 10px;
            border-top: 1px solid #ddd;
            display: flex;
        }

        .message-input {
            flex: 1;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            outline: none;
        }

        .send-button {
            padding: 10px 20px;
            background-color: #4a69bd;
            color: white;
            border: none;
            border-radius: 4px;
            margin-left: 10px;
            cursor: pointer;
        }

        .send-button:hover {
            opacity: 0.9;
        }

        .connection-status {
            padding: 5px 10px;
            text-align: center;
            font-size: 0.9rem;
            color: white;
        }

        .status-connected {
            background-color: #27ae60;
        }

        .status-disconnected {
            background-color: #e74c3c;
        }

        .status-connecting {
            background-color: #f39c12;
        }

        .overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.7);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .dialog-container {
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            width: 80%;
            max-width: 400px;
        }

        .dialog-container h2 {
            margin-bottom: 15px;
            text-align: center;
        }

        .input-group {
            margin-bottom: 15px;
        }

        .input-group label {
            display: block;
            margin-bottom: 5px;
        }

        .input-group input {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }

        .action-button {
            width: 100%;
            padding: 10px;
            background-color: #4a69bd;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: bold;
            margin-bottom: 10px;
        }

        .action-button:hover {
            background-color: #3a5999;
        }

        .action-button.secondary {
            background-color: #95a5a6;
        }

        .action-button.secondary:hover {
            background-color: #7f8c8d;
        }

        .tabs {
            display: flex;
            margin-bottom: 15px;
        }

        .tab {
            flex: 1;
            padding: 10px;
            text-align: center;
            background-color: #f0f0f0;
            cursor: pointer;
        }

        .tab.active {
            background-color: #4a69bd;
            color: white;
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        @media (max-width: 768px) {
            .chat-container {
                flex-direction: column;
            }
            
            .chat-column {
                border-right: none;
                border-bottom: 1px solid #ddd;
            }
            
            .chat-column:last-child {
                border-bottom: none;
            }
        }
    </style>
</head>
<body>
    <!-- Connection Overlay -->
    <div class="overlay" id="connectionOverlay">
        <div class="dialog-container">
            <h2>Connect to Chat</h2>
            
            <div class="tabs">
                <div class="tab active" id="createRoomTab">Create Room</div>
                <div class="tab" id="joinRoomTab">Join Room</div>
            </div>
            
            <div class="tab-content active" id="createRoomContent">
                <div class="input-group">
                    <label for="createNameInput">Your Name:</label>
                    <input type="text" id="createNameInput" placeholder="Enter your name">
                </div>
                <div class="input-group">
                    <label for="serverUrlInput">Server URL:</label>
                    <input type="text" id="serverUrlInput" placeholder="ws://server-address:port" value="wss://free.blr2.piesocket.com/v3/1?api_key=10Ky37pjFtcftY6xLpLzOuqBycYQbjec0sjZq87w&notify_self=1">
                </div>
                <button class="action-button" id="createRoomButton">Create New Room</button>
            </div>
            
            <div class="tab-content" id="joinRoomContent">
                <div class="input-group">
                    <label for="joinNameInput">Your Name:</label>
                    <input type="text" id="joinNameInput" placeholder="Enter your name">
                </div>
                <div class="input-group">
                    <label for="roomCodeInput">Room Code:</label>
                    <input type="text" id="roomCodeInput" placeholder="Enter room code">
                </div>
                <div class="input-group">
                    <label for="joinServerUrlInput">Server URL:</label>
                    <input type="text" id="joinServerUrlInput" placeholder="ws://server-address:port" value="wss://free.blr2.piesocket.com/v3/1?api_key=10Ky37pjFtcftY6xLpLzOuqBycYQbjec0sjZq87w&notify_self=1">
                </div>
                <button class="action-button" id="joinRoomButton">Join Room</button>
            </div>
        </div>
    </div>

    <!-- Main Chat Interface -->
    <div class="header">
        <span>Doctor Patient Chat</span>
        <span class="room-info" id="roomInfo">Not connected</span>
    </div>
    
    <div class="connection-status status-disconnected" id="connectionStatus">Disconnected</div>
    
    <div class="chat-container">
        <!-- Chat Column -->
        <div class="chat-column">
            <div class="user-header" id="userHeader">Chat</div>
            <div class="messages" id="messages"></div>
            <div class="input-area">
                <input type="text" class="message-input" id="messageInput" placeholder="Type a message...">
                <button class="send-button" id="sendButton">Send</button>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // DOM Elements
            const connectionOverlay = document.getElementById('connectionOverlay');
            const createRoomTab = document.getElementById('createRoomTab');
            const joinRoomTab = document.getElementById('joinRoomTab');
            const createRoomContent = document.getElementById('createRoomContent');
            const joinRoomContent = document.getElementById('joinRoomContent');
            const createNameInput = document.getElementById('createNameInput');
            const joinNameInput = document.getElementById('joinNameInput');
            const roomCodeInput = document.getElementById('roomCodeInput');
            const serverUrlInput = document.getElementById('serverUrlInput');
            const joinServerUrlInput = document.getElementById('joinServerUrlInput');
            const createRoomButton = document.getElementById('createRoomButton');
            const joinRoomButton = document.getElementById('joinRoomButton');
            const userHeader = document.getElementById('userHeader');
            const messages = document.getElementById('messages');
            const messageInput = document.getElementById('messageInput');
            const sendButton = document.getElementById('sendButton');
            const connectionStatus = document.getElementById('connectionStatus');
            const roomInfo = document.getElementById('roomInfo');
            
            // State
            let userName = '';
            let roomCode = '';
            let socket = null;
            let messageHistory = [];
            
            // Tab switching
            createRoomTab.addEventListener('click', function() {
                createRoomTab.classList.add('active');
                joinRoomTab.classList.remove('active');
                createRoomContent.classList.add('active');
                joinRoomContent.classList.remove('active');
            });
            
            joinRoomTab.addEventListener('click', function() {
                joinRoomTab.classList.add('active');
                createRoomTab.classList.remove('active');
                joinRoomContent.classList.add('active');
                createRoomContent.classList.remove('active');
            });
            
            // Create a new room
            createRoomButton.addEventListener('click', function() {
                const name = createNameInput.value.trim();
                const serverUrl = serverUrlInput.value.trim();
                
                if (name === '') {
                    alert('Please enter your name');
                    return;
                }
                
                if (serverUrl === '') {
                    alert('Please enter server URL');
                    return;
                }
                
                // Generate a random room code
                roomCode = generateRoomCode();
                userName = name;
                
                // Connect to server
                connectToServer(serverUrl, roomCode);
            });
            
            // Join an existing room
            joinRoomButton.addEventListener('click', function() {
                const name = joinNameInput.value.trim();
                const code = roomCodeInput.value.trim();
                const serverUrl = joinServerUrlInput.value.trim();
                
                if (name === '') {
                    alert('Please enter your name');
                    return;
                }
                
                if (code === '') {
                    alert('Please enter room code');
                    return;
                }
                
                if (serverUrl === '') {
                    alert('Please enter server URL');
                    return;
                }
                
                roomCode = code;
                userName = name;
                
                // Connect to server
                connectToServer(serverUrl, roomCode);
            });
            
            // Generate a random room code
            function generateRoomCode() {
                return Math.random().toString(36).substring(2, 8).toUpperCase();
            }
            
            // Connect to the WebSocket server
            function connectToServer(serverUrl, roomCode) {
                updateConnectionStatus('connecting');
                
                try {
                    // Create WebSocket connection
                    socket = new WebSocket(serverUrl);
                    
                    // Connection opened
                    socket.addEventListener('open', function(event) {
                        console.log('Connected to server');
                        updateConnectionStatus('connected');
                        
                        // Hide overlay
                        connectionOverlay.style.display = 'none';
                        
                        // Update header
                        userHeader.textContent = `Chat as ${userName}`;
                        roomInfo.textContent = `Room: ${roomCode}`;
                        
                        // Send join message
                        sendSystemMessage('join', { name: userName, room: roomCode });
                        
                        // Focus on input
                        messageInput.focus();
                    });
                    
                    // Listen for messages
                    socket.addEventListener('message', function(event) {
                        try {
                            const data = JSON.parse(event.data);
                            console.log('Message from server:', data);
                            
                            // Handle different message types
                            switch (data.type) {
                                case 'chat':
                                    if (data.room === roomCode) {
                                        addMessage(data.text, data.sender, data.senderName, data.timestamp);
                                    }
                                    break;
                                    
                                case 'join':
                                    if (data.room === roomCode && data.name !== userName) {
                                        addSystemMessage(`${data.name} joined the chat`);
                                    }
                                    break;
                                    
                                case 'leave':
                                    if (data.room === roomCode) {
                                        addSystemMessage(`${data.name} left the chat`);
                                    }
                                    break;
                            }
                        } catch (e) {
                            console.error('Error processing message:', e);
                        }
                    });
                    
                    // Connection closed
                    socket.addEventListener('close', function(event) {
                        console.log('Connection closed');
                        updateConnectionStatus('disconnected');
                        addSystemMessage('Disconnected from server');
                    });
                    
                    // Connection error
                    socket.addEventListener('error', function(event) {
                        console.error('WebSocket error:', event);
                        updateConnectionStatus('disconnected');
                        addSystemMessage('Connection error');
                    });
                    
                } catch (error) {
                    console.error('Failed to connect:', error);
                    updateConnectionStatus('disconnected');
                    alert('Failed to connect: ' + error.message);
                }
            }
            
            // Update connection status display
            function updateConnectionStatus(status) {
                connectionStatus.className = 'connection-status';
                
                switch (status) {
                    case 'connected':
                        connectionStatus.classList.add('status-connected');
                        connectionStatus.textContent = 'Connected';
                        break;
                        
                    case 'disconnected':
                        connectionStatus.classList.add('status-disconnected');
                        connectionStatus.textContent = 'Disconnected';
                        break;
                        
                    case 'connecting':
                        connectionStatus.classList.add('status-connecting');
                        connectionStatus.textContent = 'Connecting...';
                        break;
                }
            }
            
            // Send a message to the server
            function sendMessage() {
                const text = messageInput.value.trim();
                
                if (text !== '' && socket && socket.readyState === WebSocket.OPEN) {
                    const timestamp = getTimestamp();
                    
                    // Create message data
                    const messageData = {
                        type: 'chat',
                        room: roomCode,
                        text: text,
                        sender: 'me',
                        senderName: userName,
                        timestamp: timestamp
                    };
                    
                    // Send to server
                    socket.send(JSON.stringify(messageData));
                    
                    // Clear input
                    messageInput.value = '';
                    messageInput.focus();
                }
            }
            
            // Send system message
            function sendSystemMessage(type, data) {
                if (socket && socket.readyState === WebSocket.OPEN) {
                    const messageData = {
                        type: type,
                        ...data,
                        timestamp: getTimestamp()
                    };
                    
                    socket.send(JSON.stringify(messageData));
                }
            }
            
            // Add a system message to the UI
            function addSystemMessage(text) {
                const messageElement = document.createElement('div');
                messageElement.classList.add('message');
                messageElement.style.backgroundColor = '#f8ecc6';
                messageElement.style.textAlign = 'center';
                messageElement.style.fontStyle = 'italic';
                messageElement.style.margin = '10px auto';
                
                // Message content
                messageElement.textContent = text;
                
                // Add to UI
                messages.appendChild(messageElement);
                
                // Scroll to bottom
                messages.scrollTop = messages.scrollHeight;
            }
            
            // Format timestamp
            function getTimestamp() {
                const now = new Date();
                return now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            }
            
            // Add message to the UI
            function addMessage(text, sender, senderName, timestamp) {
                // Create message element
                const messageElement = document.createElement('div');
                messageElement.classList.add('message');
                
                // If sent by me, show as sent, otherwise as received
                if (sender === 'me' && senderName === userName) {
                    messageElement.classList.add('message-sent');
                } else {
                    messageElement.classList.add('message-received');
                    
                    // Add sender name for received messages
                    const nameElement = document.createElement('div');
                    nameElement.classList.add('sender-name');
                    nameElement.textContent = senderName;
                    messageElement.appendChild(nameElement);
                }
                
                // Message content
                const contentElement = document.createElement('div');
                contentElement.textContent = text;
                messageElement.appendChild(contentElement);
                
                // Timestamp
                const timestampElement = document.createElement('div');
                timestampElement.classList.add('timestamp');
                timestampElement.textContent = timestamp || getTimestamp();
                messageElement.appendChild(timestampElement);
                
                // Add to UI
                messages.appendChild(messageElement);
                
                // Scroll to bottom
                messages.scrollTop = messages.scrollHeight;
            }
            
            // Event Listeners for sending messages
            sendButton.addEventListener('click', sendMessage);
            messageInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    sendMessage();
                }
            });
            
            // Handle window unload - send leave message
            window.addEventListener('beforeunload', function() {
                if (socket && socket.readyState === WebSocket.OPEN) {
                    sendSystemMessage('leave', { name: userName, room: roomCode });
                }
            });
            
            // Focus on first input
            createNameInput.focus();
        });
    </script>
</body>
</html>
